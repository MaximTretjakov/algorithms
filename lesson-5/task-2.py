"""
    2. Написать программу сложения и умножения двух шестнадцатеричных чисел.
    При этом каждое число представляется как коллекция, элементы которой — цифры числа.
    Например, пользователь ввёл A2 и C4F. Нужно сохранить их как [‘A’, ‘2’] и [‘C’, ‘4’, ‘F’] соответственно.
    Сумма чисел из примера: [‘C’, ‘F’, ‘1’], произведение - [‘7’, ‘C’, ‘9’, ‘F’, ‘E’].

    Примечание: Если воспользоваться функциями hex() и/или int() для преобразования систем счисления,
    задача решается в несколько строк. Для прокачки алгоритмического мышления такой вариант не подходит.
    Поэтому использование встроенных функций для перевода из одной системы счисления в другую в данной задаче под запретом.
    Вспомните начальную школу и попробуйте написать сложение и умножение в столбик.


    Правила поразрядного сложения, для шестнадцатеричной системы счисления.

    "B"	0	1	2	3	4	5	6	7	8	9	a	b	c	d	e	f
"A"	0	0	1	2	3	4	5	6	7	8	9	a	b	c	d	e	f
    1	1	2	3	4	5	6	7	8	9	a	b	c	d	e	f	10
    2	2	3	4	5	6	7	8	9	a	b	c	d	e	f	10	11
    3	3	4	5	6	7	8	9	a	b	c	d	e	f	10	11	12
    4	4	5	6	7	8	9	a	b	c	d	e	f	10	11	12	13
    5	5	6	7	8	9	a	b	c	d	e	f	10	11	12	13	14
    6	6	7	8	9	a	b	c	d	e	f	10	11	12	13	14	15
    7	7	8	9	a	b	c	d	e	f	10	11	12	13	14	15	16
    8	8	9	a	b	c	d	e	f	10	11	12	13	14	15	16	17
    9	9	a	b	c	d	e	f	10	11	12	13	14	15	16	17	18
    a	a	b	c	d	e	f	10	11	12	13	14	15	16	17	18	19
    b	b	c	d	e	f	10	11	12	13	14	15	16	17	18	19	1a
    c	c	d	e	f	10	11	12	13	14	15	16	17	18	19	1a	1b
    d	d	e	f	10	11	12	13	14	15	16	17	18	19	1a	1b	1c
    e	e	f	10	11	12	13	14	15	16	17	18	19	1a	1b	1c	1d
    f	 f	10	11	12	13	14	15	16	17	18	19	1a	1b	1c	1d	1e


    код не может:
    1. складывать числа разной длины

    код может:
    1. складывать числа одинаковой длины.
    2. складывать числа последний разряд которых вида 1-6

    У меня было 2 варианта решения:
    1. С таблицей.
    2. Еще была идея вычислять для разряда числа например 4 список с ответами.
       если у нас в rule_tab['4'].append(['4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', '1-0', '1-1', '1-2', '1-3'])
       1 индекс = 4 то в конец вставляем 3 числа вида '1-0', '1-1', '1-2', '1-3', если 5 то 4 числа и тд.
       Так было бы компактнее и возможно производительнее смотря с какой струторой данных работать.
       А так пришлось вкорячить таблицу.

       Я честно пытался но увы...
"""

import collections

rule_tab = collections.defaultdict(list)

rule_tab['0'].append(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'])
rule_tab['1'].append(['1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', '1-0'])
rule_tab['2'].append(['2', '3',	'4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', '1-0', '1-1'])
rule_tab['3'].append(['3', '4',	'5', '6', '7', '8',	'9', 'a', 'b', 'c',	'd', 'e', 'f', '1-0', '1-1', '1-2'])
rule_tab['4'].append(['4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', '1-0', '1-1', '1-2', '1-3'])
rule_tab['5'].append(['5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', '1-0', '1-1', '1-2', '1-3', '1-4'])
rule_tab['6'].append(['6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', '1-0', '1-1', '1-2', '1-3', '1-4', '1-5'])
rule_tab['7'].append(['7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', '1-0', '1-1', '1-2', '1-3', '1-4', '1-5', '1-6'])
rule_tab['8'].append(['8', '9', 'a', 'b', 'c', 'd', 'e', 'f', '1-0', '1-1', '1-2', '1-3', '1-4', '1-5', '1-6', '1-7'])
rule_tab['9'].append(['9', 'a', 'b', 'c', 'd', 'e', 'f', '1-0', '1-1', '1-2', '1-3', '1-4', '1-5', '1-6', '1-7', '1-8'])
rule_tab['a'].append(['a', 'b', 'c', 'd', 'e', 'f', '1-0', '1-1', '1-2', '1-3', '1-4', '1-5', '1-6', '1-7', '1-8', '1-9'])
rule_tab['b'].append(['b', 'c', 'd', 'e', 'f', '1-0', '1-1', '1-2', '1-3', '1-4', '1-5', '1-6', '1-7', '1-8', '1-9', '1-a'])
rule_tab['c'].append(['c', 'd', 'e', 'f', '1-0', '1-1', '1-2', '1-3', '1-4', '1-5', '1-6', '1-7', '1-8', '1-9', '1-a', '1-b'])
rule_tab['d'].append(['d', 'e', 'f', '1-0', '1-1', '1-2', '1-3', '1-4', '1-5', '1-6', '1-7', '1-8', '1-9', '1-a', '1-b', '1-c'])
rule_tab['e'].append(['e', 'f', '1-0', '1-1', '1-2', '1-3', '1-4', '1-5', '1-6', '1-7', '1-8', '1-9', '1-a', '1-b', '1-c', '1-d'])
rule_tab['f'].append(['f', '1-0', '1-1', '1-2', '1-3', '1-4', '1-5', '1-6', '1-7', '1-8', '1-9', '1-a', '1-b', '1-c', '1-d', '1-e'])


b_ind = a_ind = k = biggest = offset = 0
b_res = []
a_res = []

a = collections.deque((input(f'Введите первое hex число : ')))
b = collections.deque((input(f'Введите второе hex число : ')))

for i in b:
    for b_ind, item in enumerate(rule_tab['0'][0]):
        if i == item:
            b_res.append(b_ind)

b_res.reverse()
a.reverse()

for i in a:
    for a_ind, a_item in enumerate(rule_tab[i][0]):
        if b_res[k] == a_ind:
            offset = 0
            if a_item.startswith('1-'):
                offset, item = a_item.split('-')
                # если это не последнее число и оно вида 1-9, то 9 идёт в ответ, 1 в offset
                a_res.append(item)
                # если это последнее число и оно вида 1-9, то и 1 идет в ответ. d3 + f3 = 1c6
                if 0 <= k < len(b_res):
                    a_res.append(offset)
            else:
                a_res.append(a_item)
            k += 1
            if 0 <= k < len(b_res):
                # если в offset что-то есть то изменяем индекс чтобы на следующей итерации взять правильный ответ.
                b_res[k] += int(offset)
            break

a_res.reverse()
print(f'Result {a_res}')























